plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Cloth Config
	maven {
		url "https://maven.shedaniel.me/"
	}

	// Trinkets, Cloth Config, Mod Menu
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	// Trinkets, Cardinal Components
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}

	// Spell Power, Spell Engine, Ranged Weapon API
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	// Player Animator
	maven {
		name "KosmX's maven"
		url 'https://maven.kosmx.dev/'
	}

	// Mixin Squared
	maven {
		url 'https://jitpack.io'
	}

	flatDir {
		dirs("libs")
	}
}

loom {
//	accessWidenerPath = file("src/main/resources/minecrawl.accesswidener")

	splitEnvironmentSourceSets()

	mods {
		"minecrawl" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Cloth Config
	modImplementation ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")

	// Player Animation Lib
	modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_animator_version}")

	// Spell Engine Extension
	modImplementation("maven.modrinth:spell-engine-extension:${project.spell_engine_extension_version}")

	// Spell Engine
	modImplementation("maven.modrinth:spell-engine:${project.spell_engine_version}")

	// Spell Power
	modImplementation("maven.modrinth:spell-power:${project.spell_power_version}")

	// Trinkets
	modImplementation "dev.emi:trinkets:${project.trinkets_version}"

	// Ranged Weapon API
	modImplementation("maven.modrinth:ranged-weapon-api:${project.ranged_weapon_api_version}")

	// Tiny Config
	implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

	// Better Combat
	modImplementation("maven.modrinth:better-combat:${project.better_combat_version}")

	// Better Combat Extension
	modImplementation("maven.modrinth:bettercombat-extension:${project.better_combat_extension_version}")

	// Combat Roll
	modImplementation "maven.modrinth:combat-roll:${project.combat_roll_version}-fabric"

	// Combat Roll Extension
	modImplementation("maven.modrinth:combat-roll-extension:${project.combat_roll_extension_version}")

	// Shield API
	modImplementation("maven.modrinth:shield-api:${project.shield_api_version}")

	// RPG Inventory
	modImplementation("maven.modrinth:rpg-inventory:${project.rpg_inventory_version}")

	// Overhauled Damage
	modImplementation("maven.modrinth:overhauled-damage:${project.overhauled_damage_version}")

	// Mana Attributes
	modImplementation("maven.modrinth:mana-attributes:${project.mana_attributes_version}")

	// Stamina Attributes
	modImplementation("maven.modrinth:stamina-attributes:${project.stamina_attributes_version}")

	// Inventory Size Attributes
	modImplementation("maven.modrinth:inventory-size-attributes:${project.inventory_size_attributes_version}")

	// Health Regeneration Overhaul
	modImplementation("maven.modrinth:health-regeneration-overhaul:${project.health_regeneration_overhaul_version}")

	// Food Overhaul
	modImplementation("maven.modrinth:food-overhaul:${project.food_overhaul_version}")

	// Equipment Weight
	modImplementation("maven.modrinth:equipment-weight:${project.equipment_weight_version}")

	// Backpack Attribute
	modImplementation("maven.modrinth:backpack-attribute:${project.backpack_attribute_version}")

	// Slot Customization API
	modImplementation "maven.modrinth:slot-customization-api:${project.slot_customization_api_version}"

	// Mixin Squared
	include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.2-beta.4")))

	modImplementation(":merged-items:1.0.0")
}

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand(project.properties)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

ext.changelog_last_section = { ->
	return new File("CHANGELOG.md").text.split('\n# ')[0]
}

if (project.hasProperty('release_type')) {
	tasks.register("publishMod") {
		dependsOn(build)
		finalizedBy(tasks.curseforge)
		finalizedBy(tasks.modrinth)
		finalizedBy(tasks.githubRelease)
	}

	curseforge {
		apiKey = System.getenv("CURSEFORGE_API_KEY")
		project {
			id = System.getenv("CURSEFORGE_PROJECT_ID")
			changelog = changelog_last_section()
			changelogType = 'markdown'
			releaseType = release_type
			addGameVersion "${project.minecraft_version}"
			addGameVersion "Fabric"

			relations {
				requiredDependency 'cloth-config'
				requiredDependency 'fabric-api'
				requiredDependency 'spell-engine'
				requiredDependency 'ranged-weapon-api'
				requiredDependency 'trinkets'
			}

			mainArtifact(remapJar)
			afterEvaluate {
				uploadTask.dependsOn(remapJar)
			}
			options {
				forgeGradleIntegration = false
			}
		}
	}

	modrinth {
		token = System.getenv("MODRINTH_API_KEY")
		projectId = System.getenv("MODRINTH_PROJECT_ID") // This can be the project ID or the slug. Either will work!
		versionName = "${version}"
		// You don't need to set this manually. Will fail if Modrinth has this version already
		versionNumber = "${version}"
		// You don't need to set this manually. Will fail if Modrinth has this version already
		versionType = release_type // This is the default -- can also be `beta` or `alpha`
		uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
		gameVersions = ["${project.minecraft_version}"] // Must be an array, even with only one version
		loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
		changelog = changelog_last_section()
		dependencies { // A special DSL for creating dependencies
			// scope.type
			// The scope can be `required`, `optional`, `incompatible`, or `embedded`
			// The type can either be `project` or `version`
			required.project 'cloth-config'
			required.project 'fabric-api'
			required.project 'spell-engine'
			required.project 'ranged-weapon-api'
			required.project 'trinkets'
		}
	}

	githubRelease {
		token System.getenv("GH_API_KEY") // This is your personal access token with Repo permissions
		owner System.getenv("GH_OWNER")
		// default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
		repo System.getenv("GH_REPO") // by default this is set to your project name
		tagName "${version}" // by default this is set to "v${project.version}"
		targetCommitish "${project.minecraft_version}" // by default this is set to "main"
		releaseName "Release" // Release title, by default this is the same as the tagName
		generateReleaseNotes false
		// Generate release notes automatically, if true and body is present, body will be pre-pended, if name is not given, one will be generated by the tag
		// body.set "" // by default this is empty
		draft false // by default this is true
		prerelease release_type != "release" // by default this is false
		// releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release, by default this is empty
		allowUploadToExisting false
		// Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
		overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
		// dryRun true // by default false; you can use this to see what actions would be taken without making a release
		apiEndpoint "https://api.github.com" // should only change for github enterprise users
		client // This is the okhttp client used for http requests
	}
}
